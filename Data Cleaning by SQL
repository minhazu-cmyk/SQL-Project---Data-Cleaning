
-- SQL Project - Data Cleaning

-- https://www.kaggle.com/datasets/swaptr/layoffs-2022






SELECT * 
FROM world_layoffs.layoffs;



-- first thing we want to do is create a staging table. This is the one we will work in and clean the data. We want a table with the raw data in case something happens
CREATE TABLE world_layoffs.layoffs_staging 
LIKE world_layoffs.layoffs;

INSERT layoffs_staging 
SELECT * FROM world_layoffs.layoffs;


-- now when we are data cleaning we usually follow a few steps
-- 1. check for duplicates and remove any
-- 2. standardize data and fix errors
-- 3. Look at null values and see what 
-- 4. remove any columns and rows that are not necessary - few ways



-- 1. Remove Duplicates

# First let's check for duplicates
WITH duplicate_cte AS
(
SELECT *,
ROW_NUMBER()
 OVER( PARTITION BY company,location, industry,total_laid_off, percentage_laid_off, 
 `date`,stage,funds_raised_millions) AS row_num
FROM layoff_staging
)
DELETE 
FROM duplicate_cte
WHERE row_num > 1;



CREATE TABLE `layoff_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` INT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

SELECT *
FROM layoff_staging2;
INSERT INTO layoff_staging2
SELECT *,
ROW_NUMBER()
 OVER( PARTITION BY company,location, industry,total_laid_off, percentage_laid_off, 
 `date`,stage,funds_raised_millions) AS row_num
FROM layoff_staging;

DELETE
FROM layoff_staging2
Where row_num >1;

-- standardizing data

SELECT company, TRIM(COMPANY)
FROM layoff_staging2;

UPDATE layoff_staging2
SET COMPANY = TRIM(COMPANY);

SELECT *
FROM layoff_staging2
WHERE industry LIKE 'Crypto%';

UPDATE layoff_staging2
SET industry = 'Crypto'
WHERE industry like 'Crypto%';



SELECT distinct country, trim(trailing'.' FROM country)
FROM layoff_staging2
order by 1;

UPDATE layoff_staging2
SET COUNTRY = trim(trailing'.' FROM country)
WHERE country LIKE 'United States%';

SELECT `date`

FROM layoff_staging2;

UPDATE layoff_staging2
SET `date`= STR_TO_DATE(`date`, '%m/%d/%y');

ALTER TABLE layoff_staging2
MODIFY column `date` DATE;
SELECT *
FROM layoff_staging2;

SELECT*
FROM layoff_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

SELECT*
FROM layoff_staging2
WHERE industry IS NULL
OR industry = '';
SELECT* 
FROM layoff_staging2
WHERE company = 'Airbnb';

SELECT t1.industry, t2.industry
FROM layoff_staging2 t1
JOIN layoff_staging2 t2
     ON t1.company = t2.company
where(t1.industry IS NULL OR t1.industry = '')  
AND t2.industry IS NOT NULL ;

UPDATE layoff_staging2
SET industry = NULL
WHERE industry = '';

UPDATE layoff_staging2 t1
JOIN layoff_staging2 t2
    ON t1.company =t2.company
  SET t1.industry = t2.industry
WHERE(t1.industry IS NULL )
AND t2.industry IS NOT NULL ; 

SELECT *
FROM layoff_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;
  
DELETE
FROM layoff_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

ALTER TABLE layoff_staging2
DROP column row_num
